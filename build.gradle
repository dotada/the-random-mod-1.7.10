buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = "forge"
			url = "https://maven.minecraftforge.net"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
    			changing = true
		}
		classpath 'de.undercouch:gradle-download-task:3.2.0'
	}
}

// Because Forge is too stupid to fix Deprecation Issues, and we cannot fix it on our end! (until we fork Forge)
allprojects {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:deprecation"
	}
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		downloadJavadoc = true
		downloadSources = true
	}
}

apply plugin: 'idea'
idea{
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}

apply plugin: 'forge'

version = "1.0.0"
group = "lubiprotos.first.mod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "lfm"
targetCompatibility = sourceCompatibility = JavaVersion.VERSION_1_8
minecraft {
	version = "1.7.10-10.13.4.1614-1.7.10"
	runDir = "eclipse"
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
compileJava.options.bootClasspath = org.gradle.internal.jvm.Jvm.current().getJre().getHomeDir().toString() +"/lib/rt.jar"

repositories {
	/* Optional other repo's, not needed for the below listed optional dependencies
	maven {
		name = "OC repo"
		url = "http://maven.cil.li/"
	}
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
	maven {
		name = "jabba"
		url = "http://default.mobiusstrip.eu/maven"
	}
	maven {
		name = "chickenbones"
		url = "http://chickenbones.net/maven/"
	}
	maven {
		name = "Apple"
		url "http://www.ryanliptak.com/maven/"
	}
	ivy {
		name "BuildCraft"
		artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision](-[classifier]).[ext]"
	}
	*/
}

dependencies {
	// `compile` means it is both compiled with and run with `run*`
	// `compileOnly` means it is only used to compile with but not run in dev via run*
	compile files('lib/CodeChickenCore-1.7.10-1.0.4.29-dev.jar')
	compile files('lib/CodeChickenLib-1.7.10-1.1.3.140-dev.jar')
	compile files('lib/NotEnoughItems-1.7.10-1.0.3.74-dev.jar')
	// real example
	//compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

	// for more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
}


processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}


version = "1.0"

task devJar(type: Jar) {
	from sourceSets.main.output
	classifier = 'dev'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	classifier = 'sources'
}

artifacts {
	archives devJar
	archives sourcesJar
}
